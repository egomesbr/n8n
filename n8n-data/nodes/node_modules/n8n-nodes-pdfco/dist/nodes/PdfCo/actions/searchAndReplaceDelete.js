"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'PDF URL',
        name: 'url',
        type: 'string',
        required: true,
        default: '',
        description: 'The URL of the PDF file to search and replace text in',
        hint: 'Source file URL of the PDF file to search and replace text in',
        placeholder: 'https://example.com/document.pdf',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
            },
        },
    },
    {
        displayName: 'Operation Type',
        name: 'operationType',
        type: 'options',
        options: [
            {
                name: 'Search and Delete Text',
                value: 'delete',
                description: 'Find and remove specific text from the PDF',
            },
            {
                name: 'Search and Replace Text',
                value: 'replace',
                description: 'Find and replace specific text in the PDF',
            },
            {
                name: 'Search and Replace with Image',
                value: 'replaceWithImage',
                description: 'Find text and replace it with an image',
            },
        ],
        default: 'replace',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
            },
        },
    },
    {
        displayName: 'Search and Delete Text',
        name: 'deleteOperations',
        type: 'fixedCollection',
        placeholder: 'Add Search and Delete Text',
        default: null,
        typeOptions: {
            multipleValues: true,
        },
        options: [
            {
                name: 'metadataValues',
                displayName: 'Metadata',
                values: [
                    {
                        displayName: 'Search Text',
                        name: 'searchString',
                        type: 'string',
                        default: '',
                        description: 'Text to search for in the PDF',
                        placeholder: 'e.g.: company name',
                        hint: `Text to search for in the PDF (e.g. company name)`,
                    },
                ],
            },
        ],
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
                operationType: ['delete'],
            },
        },
    },
    {
        displayName: 'Search and Replace Text',
        name: 'replaceOperations',
        type: 'fixedCollection',
        placeholder: 'Add Search and Replace Text',
        default: null,
        typeOptions: {
            multipleValues: true,
        },
        options: [
            {
                name: 'metadataValues',
                displayName: 'Metadata',
                values: [
                    {
                        displayName: 'Search Text',
                        name: 'searchString',
                        type: 'string',
                        required: true,
                        default: '',
                        description: 'Text to search for in the PDF',
                        placeholder: 'e.g.: old company name',
                        hint: `Text to search for in the PDF (e.g. old company name)`,
                    },
                    {
                        displayName: 'Replacement Text',
                        name: 'replaceString',
                        type: 'string',
                        required: true,
                        default: '',
                        description: 'Text to replace the found text with',
                        placeholder: 'e.g.: new company name',
                        hint: `Text to replace the found text with (e.g. new company name)`,
                    },
                ],
            },
        ],
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
                operationType: ['replace'],
            },
        },
    },
    {
        displayName: 'Search Text',
        name: 'searchStringForReplaceWithImage',
        type: 'string',
        required: true,
        default: '',
        description: 'Text to search for in the PDF',
        placeholder: 'e.g.: company name',
        hint: `Text to search for in the PDF (e.g. company name)`,
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
                operationType: ['replaceWithImage'],
            },
        },
    },
    {
        displayName: 'Replacement Image URL',
        name: 'replaceImage',
        type: 'string',
        required: true,
        default: '',
        description: 'URL of the image to replace the found text with',
        placeholder: 'e.g.: https://example.com/image.png',
        hint: `URL of the image to replace the found text with (e.g. https://example.com/image.png)`,
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
                operationType: ['replaceWithImage'],
            },
        },
    },
    {
        displayName: 'Pages',
        name: 'pages',
        type: 'string',
        default: '',
        description: 'Default: `0` (first page). Use ranges like `0,1-2,5,7-` (7- = from page 7 to end). Negative numbers count from end: `-2` = second-to-last page.',
        hint: 'Default: `0` (first page). Use ranges like `0,1-2,5,7-` (7- = from page 7 to end). Negative numbers count from end: `-2` = second-to-last page.',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
            },
        },
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptions',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
            },
        },
        options: [
            {
                displayName: 'Replacement Limit',
                name: 'replacementLimit',
                type: 'number',
                default: 0,
                description: 'Limit the number of replacements per search term (0 for unlimited)',
                hint: `Limit the number of replacements per search term (0 for unlimited)`,
            },
            {
                displayName: 'Use Regular Expressions',
                name: 'regexSearch',
                type: 'boolean',
                default: false,
                description: 'Whether to use regular expressions for more complex search patterns',
            },
            {
                displayName: 'Case Sensitive',
                name: 'caseSensitive',
                type: 'boolean',
                default: false,
                description: 'Whether to make the search case-sensitive',
            },
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'Custom name for the output file. If empty, uses default file name.',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output link',
            },
            {
                displayName: 'Password',
                name: 'password',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The password of the password-protected PDF file',
                hint: 'The password of the password-protected PDF file',
            },
            {
                displayName: 'HTTP Username',
                name: 'httpusername',
                type: 'string',
                default: '',
                description: 'The HTTP username if required to access source URL',
                hint: `The HTTP username if required to access source URL`,
            },
            {
                displayName: 'HTTP Password',
                name: 'httppassword',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The HTTP password if required to access source URL',
                hint: `The HTTP password if required to access source URL`,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    },
];
async function execute(index) {
    const inputUrl = this.getNodeParameter('url', index);
    const operationType = this.getNodeParameter('operationType', index);
    const body = {
        url: inputUrl,
        async: true,
        inline: true,
    };
    if (operationType === 'delete') {
        const deleteOperations = this.getNodeParameter('deleteOperations', index);
        const deleteOperationsMetadata = deleteOperations.metadataValues;
        if (deleteOperationsMetadata && Array.isArray(deleteOperationsMetadata)) {
            const lstSearchStrings = [];
            for (const entry of deleteOperationsMetadata) {
                const searchString = entry === null || entry === void 0 ? void 0 : entry.searchString;
                if (searchString) {
                    lstSearchStrings.push(searchString);
                }
            }
            body.searchStrings = lstSearchStrings;
        }
    }
    else if (operationType === 'replace') {
        const replaceOperations = this.getNodeParameter('replaceOperations', index);
        const replaceOperationsMetadata = replaceOperations.metadataValues;
        if (replaceOperationsMetadata && Array.isArray(replaceOperationsMetadata)) {
            const lstSearchStrings = [];
            const lstReplaceStrings = [];
            for (const entry of replaceOperationsMetadata) {
                const searchString = entry === null || entry === void 0 ? void 0 : entry.searchString;
                const replaceString = entry === null || entry === void 0 ? void 0 : entry.replaceString;
                if (searchString) {
                    lstSearchStrings.push(searchString);
                }
                if (replaceString) {
                    lstReplaceStrings.push(replaceString);
                }
            }
            body.searchStrings = lstSearchStrings;
            body.replaceStrings = lstReplaceStrings;
        }
    }
    else if (operationType === 'replaceWithImage') {
        const searchStringForReplaceWithImage = this.getNodeParameter('searchStringForReplaceWithImage', index);
        body.searchString = searchStringForReplaceWithImage;
        const replaceImage = this.getNodeParameter('replaceImage', index);
        body.replaceImage = replaceImage;
    }
    const pages = this.getNodeParameter('pages', index);
    if (pages) {
        body.pages = pages;
    }
    const advancedOptions = this.getNodeParameter('advancedOptions', index);
    const replacementLimit = advancedOptions.replacementLimit;
    if (replacementLimit !== undefined) {
        body.replacementLimit = replacementLimit;
    }
    const regexSearch = advancedOptions.regexSearch;
    if (regexSearch !== undefined) {
        body.regex = regexSearch;
    }
    const caseSensitive = advancedOptions.caseSensitive;
    if (caseSensitive !== undefined) {
        body.caseSensitive = caseSensitive;
    }
    const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
    if (fileName)
        body.name = fileName;
    const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
    if (callback)
        body.callback = callback;
    const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
    if (expiration)
        body.expiration = expiration;
    const httpusername = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httpusername;
    if (httpusername)
        body.httpusername = httpusername;
    const httppassword = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httppassword;
    if (httppassword)
        body.httppassword = httppassword;
    const password = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.password;
    if (password)
        body.password = password;
    const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
    if (profiles)
        body.profiles = profiles;
    (0, GenericFunctions_1.sanitizeProfiles)(body);
    let endpoint = '/v1/pdf/edit/';
    switch (operationType) {
        case 'delete':
            endpoint += 'delete-text';
            break;
        case 'replace':
            endpoint += 'replace-text';
            break;
        case 'replaceWithImage':
            endpoint += 'replace-text-with-image';
            break;
    }
    const responseData = await GenericFunctions_1.pdfcoApiRequestWithJobCheck.call(this, endpoint, body);
    return this.helpers.returnJsonArray(responseData);
}
//# sourceMappingURL=searchAndReplaceDelete.js.map