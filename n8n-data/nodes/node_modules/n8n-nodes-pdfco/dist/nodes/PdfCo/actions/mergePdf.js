"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'File URL(s) to Merge',
        name: 'url',
        type: 'string',
        required: true,
        default: [],
        placeholder: 'https://example.com/invoice.pdf',
        description: 'The URLs of the PDF files to merge',
        hint: `Enter one or more direct file URLs. Separate multiple links with commas or use multiple fields.`,
        typeOptions: {
            multipleValues: true,
            multipleValueButtonText: 'Add URL',
        },
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.MergePdf],
            },
        },
    },
    {
        displayName: 'Automatically Convert Non-PDF Files',
        name: 'autoConvert',
        type: 'boolean',
        default: false,
        description: 'Whether to auto-convert DOC, DOCX, XLS, JPG, PNG, MSG, EML files to PDF before merging',
        hint: `Whether to auto-convert DOC, DOCX, XLS, JPG, PNG, MSG, EML files to PDF before merging`,
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.MergePdf],
            },
        },
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptions',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.MergePdf],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'Custom name for the output file. If empty, uses default file name.',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output link',
            },
            {
                displayName: 'HTTP Username',
                name: 'httpusername',
                type: 'string',
                default: '',
                description: 'The HTTP username if required to access source URL',
                hint: `The HTTP username if required to access source URL`,
            },
            {
                displayName: 'HTTP Password',
                name: 'httppassword',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The HTTP password if required to access source URL',
                hint: `The HTTP password if required to access source URL`,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    }
];
async function execute(index) {
    const rawUrls = this.getNodeParameter('url', index);
    let inputUrls;
    if (Array.isArray(rawUrls)) {
        inputUrls = rawUrls;
    }
    else if (typeof rawUrls === 'string') {
        inputUrls = rawUrls.includes(',') ? rawUrls.split(',') : [rawUrls];
    }
    else {
        inputUrls = [];
    }
    inputUrls = inputUrls.map((url) => url.trim()).filter((url) => url.length > 0);
    const autoConvert = this.getNodeParameter('autoConvert', index);
    const advancedOptions = this.getNodeParameter('advancedOptions', index);
    const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
    const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
    const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
    const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
    const httpusername = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httpusername;
    const httppassword = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httppassword;
    const endpoint = autoConvert ? `/v1/pdf/merge2` : `/v1/pdf/merge`;
    const inputUrl = inputUrls.join(',');
    const body = { url: inputUrl, async: true };
    if (fileName)
        body.name = fileName;
    if (callback)
        body.callback = callback;
    if (profiles)
        body.profiles = profiles;
    if (expiration)
        body.expiration = expiration;
    if (httpusername)
        body.httpusername = httpusername;
    if (httppassword)
        body.httppassword = httppassword;
    (0, GenericFunctions_1.sanitizeProfiles)(body);
    const responseData = await GenericFunctions_1.pdfcoApiRequestWithJobCheck.call(this, endpoint, body);
    return this.helpers.returnJsonArray(responseData);
}
//# sourceMappingURL=mergePdf.js.map