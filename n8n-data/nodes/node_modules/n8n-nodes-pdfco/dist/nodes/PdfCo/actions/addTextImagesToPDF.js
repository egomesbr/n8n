"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'PDF URL',
        name: 'url',
        type: 'string',
        required: true,
        default: '',
        placeholder: 'https://example.com/invoice.pdf',
        description: 'URL to the source PDF file',
        hint: 'URL to the source PDF file',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.AddTextImagesToPDF],
            },
        },
    },
    {
        displayName: 'Text',
        name: 'annotations',
        type: 'fixedCollection',
        placeholder: 'Add Text',
        default: null,
        typeOptions: {
            multipleValues: true,
        },
        description: 'Add text annotations to the PDF. Use the PDF Inspector tool to find exact coordinates.',
        options: [
            {
                name: 'metadataValues',
                displayName: 'Metadata',
                values: [
                    {
                        displayName: 'Text',
                        name: 'text',
                        type: 'string',
                        description: 'Text content to add. Supports macros like [[page]] for page numbers.',
                        hint: 'Text content to add. Supports macros like [[page]] for page numbers.',
                        required: true,
                        default: '',
                    },
                    {
                        displayName: 'X',
                        name: 'x',
                        type: 'string',
                        description: 'X coordinate (use PDF Inspector to measure)',
                        hint: 'X coordinate (use <a href="https://app.pdf.co/pdf-edit-add-helper">PDF Inspector</a> to measure)',
                        required: true,
                        default: '',
                    },
                    {
                        displayName: 'Y',
                        name: 'y',
                        type: 'string',
                        description: 'Y coordinate (use PDF Inspector to measure)',
                        hint: 'Y coordinate (use <a href="https://app.pdf.co/pdf-edit-add-helper">PDF Inspector</a> to measure)',
                        required: true,
                        default: '',
                    },
                    {
                        displayName: 'Font Size',
                        name: 'size',
                        type: 'string',
                        description: 'The font size of the text',
                        default: '',
                    },
                    {
                        displayName: 'Font Color',
                        name: 'color',
                        type: 'color',
                        description: 'The color of the text',
                        default: '#000000',
                    },
                    {
                        displayName: 'Font Bold',
                        name: 'fontBold',
                        type: 'boolean',
                        description: 'Whether the text is bold',
                        default: false,
                    },
                    {
                        displayName: 'Italic',
                        name: 'fontItalic',
                        type: 'boolean',
                        description: 'Whether the text is italic',
                        default: false,
                    },
                    {
                        displayName: 'Strikeout',
                        name: 'fontStrikeout',
                        type: 'boolean',
                        description: 'Whether the text is strikethrough',
                        default: false,
                    },
                    {
                        displayName: 'Font Underline',
                        name: 'fontUnderline',
                        type: 'boolean',
                        description: 'Whether the text is underlined',
                        default: false,
                    },
                    {
                        displayName: 'Font Name or ID',
                        name: 'fontName',
                        type: 'options',
                        typeOptions: {
                            loadOptionsMethod: 'getFonts',
                        },
                        description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>',
                        default: '',
                        placeholder: 'arial',
                    },
                    {
                        displayName: 'Pages',
                        name: 'pages',
                        type: 'string',
                        description: 'Default: `0` (first page). Use ranges like `0,1-2,5,7-` (7- = from page 7 to end). Negative numbers count from end: `-2` = second-to-last page.',
                        hint: 'Default: `0` (first page). Use ranges like `0,1-2,5,7-` (7- = from page 7 to end). Negative numbers count from end: `-2` = second-to-last page.',
                        default: '0',
                        placeholder: '0',
                    },
                    {
                        displayName: 'Link',
                        name: 'link',
                        type: 'string',
                        description: 'Sets link on click for text',
                        hint: 'Sets link on click for text',
                        default: '',
                        placeholder: 'https://example.com',
                    },
                    {
                        displayName: 'Width',
                        name: 'width',
                        type: 'number',
                        description: 'Width of the text box',
                        default: '',
                    },
                    {
                        displayName: 'Height',
                        name: 'height',
                        type: 'number',
                        description: 'Height of the text box',
                        default: '',
                    },
                    {
                        displayName: 'Alignment',
                        name: 'alignment',
                        type: 'options',
                        description: 'Sets text alignment within the width of the text box',
                        default: 'left',
                        options: [
                            {
                                name: 'Left',
                                value: 'left',
                            },
                            {
                                name: 'Center',
                                value: 'center',
                            },
                            {
                                name: 'Right',
                                value: 'right',
                            },
                        ],
                    },
                    {
                        displayName: 'Transparent',
                        name: 'transparent',
                        type: 'boolean',
                        description: 'Whether the text is transparent',
                        default: true,
                    },
                ],
            },
        ],
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.AddTextImagesToPDF],
            },
        },
    },
    {
        displayName: 'Images',
        name: 'images',
        type: 'fixedCollection',
        placeholder: 'Add Image',
        default: null,
        typeOptions: {
            multipleValues: true,
        },
        description: 'Add images to the PDF. Use the PDF Inspector tool to find exact coordinates.',
        options: [
            {
                name: 'metadataValues',
                displayName: 'Metadata',
                values: [
                    {
                        displayName: 'Image Url',
                        name: 'imageUrl',
                        type: 'string',
                        description: 'URL to image or base64 encoded image data',
                        hint: 'URL to image, base64 encoded image, or `filetoken://` link to image stored in <a href="https://app.pdf.co/files">PDF.co Files</a> storage.',
                        required: true,
                        default: '',
                    },
                    {
                        displayName: 'X',
                        name: 'x',
                        type: 'number',
                        description: 'X coordinate (use PDF Inspector to measure)',
                        hint: 'X coordinate (use <a href="https://app.pdf.co/pdf-edit-add-helper">PDF Inspector</a> to measure)',
                        required: true,
                        default: '',
                    },
                    {
                        displayName: 'Y',
                        name: 'y',
                        type: 'number',
                        description: 'Y coordinate (use PDF Inspector to measure)',
                        hint: 'Y coordinate (use <a href="https://app.pdf.co/pdf-edit-add-helper">PDF Inspector</a> to measure)',
                        required: true,
                        default: '',
                    },
                    {
                        displayName: 'Width',
                        name: 'width',
                        type: 'number',
                        description: 'Image width in points. Leave empty for auto-detect.',
                        hint: 'Image width in points. Leave empty for auto-detect.',
                        default: '',
                    },
                    {
                        displayName: 'Height',
                        name: 'height',
                        type: 'number',
                        description: 'Image height in points. Leave empty for auto-detect.',
                        hint: 'Image height in points. Leave empty for auto-detect.',
                        default: '',
                    },
                    {
                        displayName: 'Pages',
                        name: 'pages',
                        type: 'string',
                        description: 'Default: `0` (first page). Use ranges like `0,1-2,5,7-` (7- = from page 7 to end). Negative numbers count from end: `-2` = second-to-last page.',
                        hint: 'Default: `0` (first page). Use ranges like `0,1-2,5,7-` (7- = from page 7 to end). Negative numbers count from end: `-2` = second-to-last page.',
                        default: '0',
                        placeholder: '0',
                    },
                    {
                        displayName: 'Link',
                        name: 'link',
                        type: 'string',
                        description: 'Sets link on click for image',
                        hint: 'Sets link on click for image',
                        default: '',
                        placeholder: 'https://example.com',
                    },
                    {
                        displayName: 'Keep Aspect Ratio',
                        name: 'keepAspectRatio',
                        type: 'boolean',
                        description: 'Whether to keep the aspect ratio of the image',
                        default: true,
                    },
                ],
            },
        ],
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.AddTextImagesToPDF],
            },
        },
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptions',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.AddTextImagesToPDF],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'Custom name for the output file. If empty, uses default file name.',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                description: 'The callback URL or Webhook used to receive the output data',
                placeholder: 'https://example.com/callback',
                hint: 'The callback URL or Webhook used to receive the output data.',
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'Time in minutes before output links expire'
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    }
];
async function execute(index) {
    const endpoint = `/v1/pdf/edit/add`;
    const inputUrl = this.getNodeParameter('url', index);
    const body = { url: inputUrl, inline: true, async: true };
    const annotations = this.getNodeParameter('annotations', index);
    const annotationsMetadata = annotations.metadataValues;
    if (annotationsMetadata && Array.isArray(annotationsMetadata)) {
        const lstAnnotations = [];
        for (const entry of annotationsMetadata) {
            const text = entry === null || entry === void 0 ? void 0 : entry.text;
            const x = entry.x;
            const y = entry.y;
            let itmAnnotation = { text, x, y };
            const size = entry.size;
            if (size)
                itmAnnotation.size = size;
            const color = entry.color;
            if (color)
                itmAnnotation.color = color;
            const fontBold = entry.fontBold;
            if (fontBold)
                itmAnnotation.fontBold = fontBold;
            const fontItalic = entry.fontItalic;
            if (fontItalic)
                itmAnnotation.fontItalic = fontItalic;
            const fontStrikeout = entry.fontStrikeout;
            if (fontStrikeout)
                itmAnnotation.fontStrikeout = fontStrikeout;
            const fontUnderline = entry.fontUnderline;
            if (fontUnderline)
                itmAnnotation.fontUnderline = fontUnderline;
            const fontName = entry.fontName;
            if (fontName)
                itmAnnotation.fontName = fontName;
            const pages = entry.pages;
            if (pages)
                itmAnnotation.pages = pages;
            const link = entry.link;
            if (link)
                itmAnnotation.link = link;
            const width = entry.width;
            if (width)
                itmAnnotation.width = width;
            const height = entry.height;
            if (height)
                itmAnnotation.height = height;
            const alignment = entry.alignment;
            if (alignment)
                itmAnnotation.alignment = alignment;
            const transparent = entry.transparent;
            if (transparent !== undefined)
                itmAnnotation.transparent = transparent;
            lstAnnotations.push(itmAnnotation);
        }
        body.annotations = lstAnnotations;
    }
    const images = this.getNodeParameter('images', index);
    const imagesMetadata = images.metadataValues;
    if (imagesMetadata && Array.isArray(imagesMetadata)) {
        const lstImages = [];
        for (const entry of imagesMetadata) {
            const imageUrl = entry === null || entry === void 0 ? void 0 : entry.imageUrl;
            const x = entry.x;
            const y = entry.y;
            let itmImg = { url: imageUrl, x, y };
            const width = entry.width;
            if (width)
                itmImg.width = width;
            const height = entry.height;
            if (height)
                itmImg.height = height;
            const pages = entry.pages;
            if (pages)
                itmImg.pages = pages;
            const link = entry.link;
            if (link)
                itmImg.link = link;
            const keepAspectRatio = entry.keepAspectRatio;
            if (keepAspectRatio !== undefined)
                itmImg.keepAspectRatio = keepAspectRatio;
            lstImages.push(itmImg);
        }
        body.images = lstImages;
    }
    const advancedOptions = this.getNodeParameter('advancedOptions', index);
    const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
    if (fileName)
        body.name = fileName;
    const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
    if (profiles)
        body.profiles = profiles;
    const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
    if (callback)
        body.callback = callback;
    const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
    if (expiration)
        body.expiration = expiration;
    (0, GenericFunctions_1.sanitizeProfiles)(body);
    const responseData = await GenericFunctions_1.pdfcoApiRequestWithJobCheck.call(this, endpoint, body);
    return this.helpers.returnJsonArray(responseData);
}
//# sourceMappingURL=addTextImagesToPDF.js.map