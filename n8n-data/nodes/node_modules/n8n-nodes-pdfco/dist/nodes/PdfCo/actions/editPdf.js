"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'PDF URL',
        name: 'url',
        type: 'string',
        required: true,
        default: '',
        placeholder: 'https://example.com/document.pdf',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
            },
        },
    },
    {
        displayName: 'Operation Type',
        name: 'operationType',
        type: 'options',
        options: [
            {
                name: 'Search and Delete Text',
                value: 'delete',
                description: 'Find and remove specific text from the PDF',
            },
            {
                name: 'Search and Replace Text',
                value: 'replace',
                description: 'Find and replace specific text in the PDF',
            },
            {
                name: 'Search and Replace with Image',
                value: 'replaceWithImage',
                description: 'Find text and replace it with an image',
            },
        ],
        default: 'replace',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
            },
        },
    },
    {
        displayName: 'Pages',
        name: 'pages',
        type: 'string',
        default: '',
        description: 'Comma-separated list of page numbers to search in. Leave empty to search all pages.',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
            },
        },
    },
    {
        displayName: 'Search and Delete Operations',
        name: 'deleteOperations',
        type: 'collection',
        placeholder: 'Add Operation',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
                operationType: ['delete'],
            },
        },
        options: [
            {
                displayName: 'Search Text',
                name: 'searchString',
                type: 'string',
                default: '',
                description: 'Text to search for in the PDF',
                placeholder: 'e.g.: company name',
            },
        ],
    },
    {
        displayName: 'Search and Replace Operations',
        name: 'replaceOperations',
        type: 'collection',
        placeholder: 'Add Operation',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
                operationType: ['replace'],
            },
        },
        options: [
            {
                displayName: 'Search Text',
                name: 'searchString',
                type: 'string',
                default: '',
                description: 'Text to search for in the PDF',
                placeholder: 'e.g.: old company name',
            },
            {
                displayName: 'Replacement Text',
                name: 'replaceString',
                type: 'string',
                default: '',
                description: 'Text to replace the found text with',
                placeholder: 'e.g.: new company name',
            },
        ],
    },
    {
        displayName: 'Search and Replace with Image',
        name: 'replaceWithImage',
        type: 'collection',
        placeholder: 'Add Operation',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
                operationType: ['replaceWithImage'],
            },
        },
        options: [
            {
                displayName: 'Search Text',
                name: 'searchString',
                type: 'string',
                default: '',
                description: 'Text to search for in the PDF',
                placeholder: 'e.g.: company name',
            },
            {
                displayName: 'Replacement Image URL',
                name: 'replaceImage',
                type: 'string',
                default: '',
                description: 'URL of the image to replace the found text with',
                placeholder: 'e.g.: https://example.com/image.png',
            },
        ],
    },
    {
        displayName: 'Search Options',
        name: 'searchOptions',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
            },
        },
        options: [
            {
                displayName: 'Use Regular Expressions',
                name: 'regexSearch',
                type: 'boolean',
                default: false,
                description: 'Whether to use regular expressions for more complex search patterns',
            },
            {
                displayName: 'Case Sensitive',
                name: 'caseSensitive',
                type: 'boolean',
                default: false,
                description: 'Whether to make the search case-sensitive',
            },
        ],
    },
    {
        displayName: 'Replacement Limit',
        name: 'replacementLimit',
        type: 'number',
        default: 0,
        description: 'Limit the number of replacements per search term (0 for unlimited)',
        displayOptions: {
            show: {
                operationType: ['replace'],
            },
        },
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptions',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SearchAndReplaceDelete],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
            },
        ],
    },
];
async function execute(index) {
    const inputUrl = this.getNodeParameter('url', index);
    const operationType = this.getNodeParameter('operationType', index);
    const pages = this.getNodeParameter('pages', index);
    const searchOptions = this.getNodeParameter('searchOptions', index);
    const advancedOptions = this.getNodeParameter('advancedOptions', index);
    const body = {
        url: inputUrl,
        async: true,
        inline: true,
    };
    if (searchOptions.regexSearch !== undefined) {
        body.regex = searchOptions.regexSearch;
    }
    if (searchOptions.caseSensitive !== undefined) {
        body.caseSensitive = searchOptions.caseSensitive;
    }
    if (operationType === 'delete') {
        const deleteOperations = this.getNodeParameter('deleteOperations', index);
        body.searchStrings = deleteOperations.map(op => op.searchString).join(',');
    }
    else if (operationType === 'replace') {
        const replaceOperations = this.getNodeParameter('replaceOperations', index);
        body.searchStrings = replaceOperations.map(op => op.searchString).join(',');
        body.replaceStrings = replaceOperations.map(op => op.replaceString).join(',');
        const replacementLimit = this.getNodeParameter('replacementLimit', index);
        if (replacementLimit !== undefined) {
            body.replacementLimit = replacementLimit;
        }
    }
    else if (operationType === 'replaceWithImage') {
        const replaceWithImage = this.getNodeParameter('replaceWithImage', index);
        body.searchString = replaceWithImage.searchString;
        body.replaceImage = replaceWithImage.replaceImage;
    }
    if (pages) {
        body.pages = pages;
    }
    const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
    if (fileName)
        body.name = fileName;
    const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
    if (callback)
        body.callback = callback;
    const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
    if (expiration)
        body.expiration = expiration;
    const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
    if (profiles)
        body.profiles = profiles;
    (0, GenericFunctions_1.sanitizeProfiles)(body);
    let endpoint = '/v1/pdf/edit/';
    switch (operationType) {
        case 'delete':
            endpoint += 'delete-text';
            break;
        case 'replace':
            endpoint += 'replace-text';
            break;
        case 'replaceWithImage':
            endpoint += 'replace-text-with-image';
            break;
    }
    const responseData = await GenericFunctions_1.pdfcoApiRequestWithJobCheck.call(this, endpoint, body);
    return this.helpers.returnJsonArray(responseData);
}
//# sourceMappingURL=editPdf.js.map