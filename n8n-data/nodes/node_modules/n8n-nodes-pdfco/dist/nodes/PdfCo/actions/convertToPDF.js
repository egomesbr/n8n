"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'Convert Type',
        name: 'convertType',
        type: 'options',
        options: [
            {
                name: 'CSV to PDF',
                value: 'fromCsv',
            },
            {
                name: 'Document to PDF (RTF, DOC, DOCX, TXT)',
                value: 'fromDocument',
            },
            {
                name: 'Email to PDF (MSG or EML)',
                value: 'fromEmail',
            },
            {
                name: 'Image to PDF (JPG, PNG, TIFF)',
                value: 'fromImage',
            },
            {
                name: 'XLS to PDF',
                value: 'fromXls',
            },
            {
                name: 'XLSX to PDF',
                value: 'fromXlsx',
            },
        ],
        default: 'fromDocument',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.ConvertToPDF],
            },
        },
    },
    {
        displayName: 'Source File URL of the File to Convert',
        name: 'url',
        type: 'string',
        required: true,
        default: '',
        description: 'The URL of the file to convert',
        hint: `Enter the direct URL of the file you want to convert. Make sure the link is publicly accessible.`,
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.ConvertToPDF],
            },
        },
    },
    {
        displayName: 'Worksheet Index',
        name: 'worksheetIndex',
        type: 'string',
        default: '',
        placeholder: '0',
        description: 'The index of the worksheet to convert',
        hint: `The index of the worksheet to convert`,
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.ConvertToPDF],
                convertType: ['fromXls', 'fromXlsx'],
            },
        },
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptionsCommon',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.ConvertToPDF],
                convertType: ['fromDocument', 'fromXls', 'fromXlsx', 'fromImage'],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'Custom name for the output file. If empty, uses default file name.',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output link',
            },
            {
                displayName: 'HTTP Username',
                name: 'httpusername',
                type: 'string',
                default: '',
                description: 'The HTTP username if required to access source URL',
                hint: `The HTTP username if required to access source URL`,
            },
            {
                displayName: 'HTTP Password',
                name: 'httppassword',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The HTTP password if required to access source URL',
                hint: `The HTTP password if required to access source URL`,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptionsCsv',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.ConvertToPDF],
                convertType: ['fromCsv'],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'Custom name for the output file. If empty, uses default file name.',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Auto Size',
                name: 'autosize',
                type: 'boolean',
                default: true,
                description: 'Whether to automatically size pages',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output link',
                hint: `The expiration time of the output link`,
            },
            {
                displayName: 'HTTP Username',
                name: 'httpusername',
                type: 'string',
                default: '',
                description: 'The HTTP username if required to access source URL',
                hint: `The HTTP username if required to access source URL`,
            },
            {
                displayName: 'HTTP Password',
                name: 'httppassword',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The HTTP password if required to access source URL',
                hint: `The HTTP password if required to access source URL`,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptionsEmail',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.ConvertToPDF],
                convertType: ['fromEmail'],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'Custom name for the output file. If empty, uses default file name.',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Embeds Attachments',
                name: 'embedAttachments',
                type: 'boolean',
                default: true,
                description: 'Whether to embed attachments in the PDF',
                hint: `Whether to embed attachments in the PDF`,
            },
            {
                displayName: 'Convert Attachments to PDF',
                name: 'convertAttachments',
                type: 'boolean',
                default: true,
                description: 'Whether to convert attachments to PDF',
                hint: `Whether to convert attachments to PDF`,
            },
            {
                displayName: 'Margins',
                name: 'margins',
                type: 'string',
                placeholder: '`10px`, `5mm`, `5in`, `5px 5px 5px 5px`',
                default: '',
                description: 'The margins of the PDF',
                hint: `The margins of the PDF (e.g. '10px', '5mm', '5in', '5px 5px 5px 5px')`,
            },
            {
                displayName: 'Orientation',
                name: 'orientation',
                type: 'options',
                options: [
                    {
                        name: 'Portrait',
                        value: 'portrait',
                    },
                    {
                        name: 'Landscape',
                        value: 'landscape',
                    },
                ],
                default: 'portrait',
                description: 'The orientation of the PDF',
            },
            {
                displayName: 'Paper Size',
                name: 'paperSize',
                type: 'options',
                options: [
                    { name: 'A0', value: 'a0' },
                    { name: 'A1', value: 'a1' },
                    { name: 'A2', value: 'a2' },
                    { name: 'A3', value: 'a3' },
                    { name: 'A4', value: 'a4' },
                    { name: 'A5', value: 'a5' },
                    { name: 'A6', value: 'a6' },
                    { name: 'Legal', value: 'legal' },
                    { name: 'Letter', value: 'letter' },
                    { name: 'Tabloid', value: 'tabloid' },
                ],
                default: 'letter',
                description: 'The paper size of the PDF',
            },
            {
                displayName: 'Custom Paper Size',
                name: 'custom',
                type: 'string',
                default: '',
                description: 'The custom paper size of the PDF',
                placeholder: '`200 300`, `200px 300px`, `200mm 300mm`, `20cm 30cm` or `6in 8in`',
                hint: `The custom paper size of the PDF (e.g. '200 300', '200px 300px', '200mm 300mm', '20cm 30cm' or '6in 8in')`,
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output link',
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    }
];
async function execute(index) {
    const convertType = this.getNodeParameter('convertType', index);
    const body = { async: true };
    let endpoint = '';
    const inputUrl = this.getNodeParameter('url', index);
    if (inputUrl)
        body.url = inputUrl;
    if (convertType === 'fromDocument') {
        endpoint = '/v1/pdf/convert/from/doc';
    }
    else if (convertType === 'fromCsv') {
        endpoint = '/v1/pdf/convert/from/csv';
    }
    else if (convertType === 'fromXls' || convertType === 'fromXlsx') {
        if (convertType === 'fromXls') {
            endpoint = '/v1/xls/convert/to/pdf';
        }
        else if (convertType === 'fromXlsx') {
            endpoint = '/v1/xlsx/convert/to/pdf';
        }
        const worksheetIndex = this.getNodeParameter('worksheetIndex', index);
        if (worksheetIndex && !isNaN(Number(worksheetIndex))) {
            endpoint = '/v1/xls/convert/to/pdf';
            body.worksheetIndex = worksheetIndex;
        }
    }
    else if (convertType === 'fromImage') {
        endpoint = '/v1/pdf/convert/from/image';
    }
    else if (convertType === 'fromEmail') {
        endpoint = '/v1/pdf/convert/from/email';
    }
    if (convertType === 'fromEmail') {
        const advancedOptionsEmail = this.getNodeParameter('advancedOptionsEmail', index);
        const fileName = advancedOptionsEmail === null || advancedOptionsEmail === void 0 ? void 0 : advancedOptionsEmail.name;
        if (fileName)
            body.name = fileName;
        const callback = advancedOptionsEmail === null || advancedOptionsEmail === void 0 ? void 0 : advancedOptionsEmail.callback;
        if (callback)
            body.callback = callback;
        const expiration = advancedOptionsEmail === null || advancedOptionsEmail === void 0 ? void 0 : advancedOptionsEmail.expiration;
        if (expiration)
            body.expiration = expiration;
        const profiles = advancedOptionsEmail === null || advancedOptionsEmail === void 0 ? void 0 : advancedOptionsEmail.profiles;
        if (profiles)
            body.profiles = profiles;
        const embedAttachments = advancedOptionsEmail === null || advancedOptionsEmail === void 0 ? void 0 : advancedOptionsEmail.embedAttachments;
        body.embedAttachments = embedAttachments;
        const convertAttachments = advancedOptionsEmail === null || advancedOptionsEmail === void 0 ? void 0 : advancedOptionsEmail.convertAttachments;
        body.convertAttachments = convertAttachments;
        const orientation = advancedOptionsEmail === null || advancedOptionsEmail === void 0 ? void 0 : advancedOptionsEmail.orientation;
        if (orientation)
            body.orientation = orientation;
        const paperSize = advancedOptionsEmail === null || advancedOptionsEmail === void 0 ? void 0 : advancedOptionsEmail.paperSize;
        if (paperSize)
            body.paperSize = paperSize;
        const custom = advancedOptionsEmail === null || advancedOptionsEmail === void 0 ? void 0 : advancedOptionsEmail.custom;
        if (custom)
            body.paperSize = custom;
        const margins = advancedOptionsEmail === null || advancedOptionsEmail === void 0 ? void 0 : advancedOptionsEmail.margins;
        if (margins)
            body.margins = margins;
    }
    else if (convertType === 'fromCsv') {
        const advancedOptionsCsv = this.getNodeParameter('advancedOptionsCsv', index);
        const fileName = advancedOptionsCsv === null || advancedOptionsCsv === void 0 ? void 0 : advancedOptionsCsv.name;
        if (fileName)
            body.name = fileName;
        const callback = advancedOptionsCsv === null || advancedOptionsCsv === void 0 ? void 0 : advancedOptionsCsv.callback;
        if (callback)
            body.callback = callback;
        const expiration = advancedOptionsCsv === null || advancedOptionsCsv === void 0 ? void 0 : advancedOptionsCsv.expiration;
        if (expiration)
            body.expiration = expiration;
        const httpusername = advancedOptionsCsv === null || advancedOptionsCsv === void 0 ? void 0 : advancedOptionsCsv.httpusername;
        if (httpusername)
            body.httpusername = httpusername;
        const httppassword = advancedOptionsCsv === null || advancedOptionsCsv === void 0 ? void 0 : advancedOptionsCsv.httppassword;
        if (httppassword)
            body.httppassword = httppassword;
        const profiles = advancedOptionsCsv === null || advancedOptionsCsv === void 0 ? void 0 : advancedOptionsCsv.profiles;
        if (profiles)
            body.profiles = profiles;
        const autosize = advancedOptionsCsv === null || advancedOptionsCsv === void 0 ? void 0 : advancedOptionsCsv.autosize;
        if (autosize !== undefined)
            body.autosize = autosize;
    }
    else {
        const advancedOptions = this.getNodeParameter('advancedOptionsCommon', index);
        const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
        if (fileName)
            body.name = fileName;
        const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
        if (callback)
            body.callback = callback;
        const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
        if (expiration)
            body.expiration = expiration;
        const httpusername = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httpusername;
        if (httpusername)
            body.httpusername = httpusername;
        const httppassword = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httppassword;
        if (httppassword)
            body.httppassword = httppassword;
        const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
        if (profiles)
            body.profiles = profiles;
    }
    (0, GenericFunctions_1.sanitizeProfiles)(body);
    const responseData = await GenericFunctions_1.pdfcoApiRequestWithJobCheck.call(this, endpoint, body);
    return this.helpers.returnJsonArray(responseData);
}
//# sourceMappingURL=convertToPDF.js.map