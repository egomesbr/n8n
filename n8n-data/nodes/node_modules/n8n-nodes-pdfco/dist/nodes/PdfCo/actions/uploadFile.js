"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'Upload Method',
        name: 'uploadMethod',
        type: 'options',
        default: 'presignedUrl',
        options: [
            {
                name: 'Standard Upload',
                value: 'presignedUrl',
                description: 'Upload files directly (supports larger files up to 2GB)',
                hint: `Upload files directly (supports larger files up to 2GB)`,
            },
            {
                name: 'Base64',
                value: 'base64',
                description: 'Upload using base64 encoding (suitable for smaller files)',
                hint: `Upload using base64 encoding (suitable for smaller files)`,
            },
        ],
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.UploadFile],
            },
        },
        description: 'The method to use for uploading the file',
        hint: `The method to use for uploading the file`,
    },
    {
        displayName: 'Binary File',
        name: 'binaryData',
        type: 'boolean',
        default: false,
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.UploadFile],
                uploadMethod: ['presignedUrl'],
            },
        },
        description: 'Whether the data to upload should be taken from binary field',
        hint: `Enable this if the file you want to upload is coming from a binary field in a previous node`,
    },
    {
        displayName: 'File Content',
        name: 'fileContent',
        type: 'string',
        default: '',
        typeOptions: {
            rows: 4,
        },
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.UploadFile],
                binaryData: [false],
                uploadMethod: ['presignedUrl'],
            },
        },
        placeholder: '',
        description: 'The text content of the file to upload',
        hint: `The text content of the file to be created and uploaded`,
    },
    {
        displayName: 'Input Binary Field',
        name: 'binaryPropertyName',
        type: 'string',
        default: 'data',
        required: true,
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.UploadFile],
                binaryData: [true],
                uploadMethod: ['presignedUrl'],
            },
        },
        placeholder: '',
        hint: 'Enter the name of the binary field that holds the file to be uploaded (e.g. data, attachment_0, etc).',
    },
    {
        displayName: 'Base64 Content',
        name: 'base64Content',
        type: 'string',
        default: '',
        required: true,
        typeOptions: {
            rows: 4,
        },
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.UploadFile],
                uploadMethod: ['base64'],
            },
        },
        placeholder: '',
        description: 'The base64 encoded content of the file to upload',
        hint: `The base64 encoded content of the file to upload`,
    },
    {
        displayName: 'File Name',
        name: 'name',
        type: 'string',
        required: true,
        default: '',
        description: 'The name of the file to upload',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.UploadFile],
            },
        },
        hint: `The name of the file to upload`,
    },
];
async function execute(index) {
    const fileName = this.getNodeParameter('name', index);
    const uploadMethod = this.getNodeParameter('uploadMethod', index);
    if (uploadMethod === 'base64') {
        const base64Content = this.getNodeParameter('base64Content', index);
        const response = await GenericFunctions_1.pdfcoApiRequest.call(this, '/v1/file/upload/base64', {
            file: base64Content,
            name: fileName,
        }, 'POST');
        return this.helpers.returnJsonArray({ url: response.url });
    }
    else {
        const presignedUrlResponse = await GenericFunctions_1.pdfcoApiRequest.call(this, '/v1/file/upload/get-presigned-url', {}, 'GET', { name: fileName });
        const presignedUrl = presignedUrlResponse.presignedUrl;
        const finalUrl = presignedUrlResponse.url;
        let body;
        if (this.getNodeParameter('binaryData', index)) {
            const binaryPropertyName = this.getNodeParameter('binaryPropertyName', index);
            this.helpers.assertBinaryData(index, binaryPropertyName);
            body = await this.helpers.getBinaryDataBuffer(index, binaryPropertyName);
        }
        else {
            body = Buffer.from(this.getNodeParameter('fileContent', index), 'utf8');
        }
        const uploadOptions = {
            url: presignedUrl,
            method: 'PUT',
            body,
            headers: {
                'Content-Type': 'application/octet-stream',
            },
            skipSslCertificateValidation: true,
        };
        await this.helpers.request(uploadOptions);
        return this.helpers.returnJsonArray({ url: finalUrl });
    }
}
//# sourceMappingURL=uploadFile.js.map