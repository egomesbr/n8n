"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'PDF URL',
        name: 'url',
        type: 'string',
        required: true,
        default: '',
        placeholder: 'https://example.com/invoice.pdf',
        description: 'The URL of the PDF file to fill',
        hint: `Source file URL of the PDF file to fill`,
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.FillPdfForm],
            },
        },
    },
    {
        displayName: 'Fields',
        name: 'fields',
        type: 'fixedCollection',
        placeholder: 'Add Field Data',
        default: null,
        typeOptions: {
            multipleValues: true,
        },
        options: [
            {
                name: 'metadataValues',
                displayName: 'Metadata',
                values: [
                    {
                        displayName: 'Form Field Name',
                        name: 'fieldName',
                        type: 'string',
                        required: true,
                        default: '',
                        description: 'The name of the field to fill',
                        hint: 'Name of the form field. To find form fields please use the PDF Information operation or our <a href="https://app.pdf.co/pdf-edit-add-helper">PDF Edit Add Helper tool</a>.',
                    },
                    {
                        displayName: 'Text',
                        name: 'text',
                        type: 'string',
                        default: '',
                        description: 'The text to fill in the field',
                        hint: 'Enter the text you want to insert into the form field. If you need to check a checkbox field then set to `true`. For radio box, set index like `1`.',
                    },
                    {
                        displayName: 'Pages',
                        name: 'pages',
                        type: 'string',
                        default: '0',
                        placeholder: '0',
                        description: 'Default: `0` (first page). Use ranges like `0,1-2,5,7-` (7- = from page 7 to end). Negative numbers count from end: `-2` = second-to-last page.',
                        hint: 'Default: `0` (first page). Use ranges like `0,1-2,5,7-` (7- = from page 7 to end). Negative numbers count from end: `-2` = second-to-last page.',
                    },
                    {
                        displayName: 'Font Size',
                        name: 'size',
                        type: 'string',
                        default: '',
                        description: 'The size of the font to use',
                    },
                    {
                        displayName: 'Font Bold',
                        name: 'fontBold',
                        type: 'boolean',
                        default: false,
                        description: 'Whether the font should be bold',
                    },
                    {
                        displayName: 'Italic',
                        name: 'fontItalic',
                        type: 'boolean',
                        default: false,
                        description: 'Whether the font should be italic',
                    },
                    {
                        displayName: 'Strikeout',
                        name: 'fontStrikeout',
                        type: 'boolean',
                        default: false,
                        description: 'Whether the font should be strikethrough',
                    },
                    {
                        displayName: 'Font Underline',
                        name: 'fontUnderline',
                        type: 'boolean',
                        default: false,
                        description: 'Whether the font should be underlined',
                    },
                    {
                        displayName: 'Font Name or ID',
                        name: 'fontName',
                        type: 'options',
                        typeOptions: {
                            loadOptionsMethod: 'getFonts',
                        },
                        default: '',
                        placeholder: 'Arial',
                        description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>',
                    },
                ],
            },
        ],
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.FillPdfForm],
            },
        },
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptions',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.FillPdfForm],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'Custom name for the output file. If empty, uses default file name.',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output links',
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    }
];
async function execute(index) {
    const endpoint = `/v1/pdf/edit/add`;
    const inputUrl = this.getNodeParameter('url', index);
    const body = { url: inputUrl, inline: true, async: true };
    const fields = this.getNodeParameter('fields', index);
    const fieldsMetadata = fields.metadataValues;
    if (fieldsMetadata && Array.isArray(fieldsMetadata)) {
        const lstFields = [];
        for (const entry of fieldsMetadata) {
            const fieldName = entry === null || entry === void 0 ? void 0 : entry.fieldName;
            let itmAnnotation = { fieldName };
            const text = entry.text;
            if (text)
                itmAnnotation.text = text;
            const pages = entry.pages;
            if (pages)
                itmAnnotation.pages = pages;
            const size = entry.size;
            if (size)
                itmAnnotation.size = size;
            const fontBold = entry.fontBold;
            if (fontBold)
                itmAnnotation.fontBold = fontBold;
            const fontItalic = entry.fontItalic;
            if (fontItalic)
                itmAnnotation.fontItalic = fontItalic;
            const fontStrikeout = entry.fontStrikeout;
            if (fontStrikeout)
                itmAnnotation.fontStrikeout = fontStrikeout;
            const fontUnderline = entry.fontUnderline;
            if (fontUnderline)
                itmAnnotation.fontUnderline = fontUnderline;
            const fontName = entry.fontName;
            if (fontName)
                itmAnnotation.fontName = fontName;
            lstFields.push(itmAnnotation);
        }
        body.fields = lstFields;
    }
    const advancedOptions = this.getNodeParameter('advancedOptions', index);
    const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
    if (fileName)
        body.name = fileName;
    const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
    if (profiles)
        body.profiles = profiles;
    const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
    if (callback)
        body.callback = callback;
    const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
    if (expiration)
        body.expiration = expiration;
    (0, GenericFunctions_1.sanitizeProfiles)(body);
    const responseData = await GenericFunctions_1.pdfcoApiRequestWithJobCheck.call(this, endpoint, body);
    return this.helpers.returnJsonArray(responseData);
}
//# sourceMappingURL=fillPdfForm.js.map