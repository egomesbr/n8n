"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'PDF URL',
        name: 'url',
        type: 'string',
        required: true,
        default: '',
        placeholder: 'https://example.com/invoice.pdf',
        description: 'The URL of the PDF file to convert',
        hint: `Source file URL of the PDF file to convert`,
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.ConvertFromPDF],
            },
        },
    },
    {
        displayName: 'Convert Type',
        name: 'convertType',
        type: 'options',
        options: [
            {
                name: 'PDF to CSV',
                value: 'toCsv',
            },
            {
                name: 'PDF to HTML',
                value: 'toHtml',
            },
            {
                name: 'PDF to JPG',
                value: 'toJpg',
            },
            {
                name: 'PDF to JSON (AI-Powered)',
                value: 'toJsonMeta',
                description: 'AI-powered PDF to JSON conversion with text styles and metadata detection'
            },
            {
                name: 'PDF to JSON (Simple)',
                value: 'toJson2',
                description: 'Converts PDF to JSON with basic text, table, and image extraction'
            },
            {
                name: 'PDF to PNG',
                value: 'toPng',
            },
            {
                name: 'PDF to Text',
                value: 'toText',
            },
            {
                name: 'PDF to Text (No Layout & Fast)',
                value: 'toTextSimple',
            },
            {
                name: 'PDF to TIFF',
                value: 'toTiff',
            },
            {
                name: 'PDF to WEBP',
                value: 'toWebp',
            },
            {
                name: 'PDF to XLS',
                value: 'toXls',
            },
            {
                name: 'PDF to XLSX',
                value: 'toXlsx',
            },
            {
                name: 'PDF to XML',
                value: 'toXml',
            },
        ],
        default: 'toText',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.ConvertFromPDF],
            },
        },
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptions',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.ConvertFromPDF],
                convertType: [
                    'toCsv',
                    'toHtml',
                    'toJson',
                    'toJsonMeta',
                    'toJson2',
                    'toText',
                    'toXls',
                    'toXlsx',
                    'toXml',
                ],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'Custom name for the output file. If empty, uses default file name.',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Pages',
                name: 'pages',
                type: 'string',
                default: '',
                placeholder: '0',
                hint: `Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. First page is 0 (zero). Example: '0,1-2,5-'.`,
            },
            {
                displayName: 'Line Grouping',
                name: 'lineGrouping',
                type: 'options',
                options: [
                    {
                        name: 'Group by Rows',
                        value: '1',
                        description: 'Groups rows by checking if cells can be merged with the next row'
                    },
                    {
                        name: 'Group by Columns',
                        value: '2',
                        description: 'Groups cells within the same column across rows'
                    },
                    {
                        name: 'Join Orphaned Rows',
                        value: '3',
                        description: 'Joins orphaned rows to previous rows when no separator exists'
                    },
                ],
                default: '1',
                hint: `Controls how lines of text are grouped within table cells when extracting data from a PDF.`,
            },
            {
                displayName: 'Unwrap',
                name: 'unwrap',
                type: 'boolean',
                default: false,
                description: 'Whether to unwrap lines into a single line within table cells when lineGrouping provided',
                hint: `Whether to unwrap lines into a single line within table cells when lineGrouping provided`,
            },
            {
                displayName: 'OCR Language Name or ID',
                name: 'lang',
                type: 'options',
                typeOptions: {
                    loadOptionsMethod: 'getLanguages',
                },
                default: '',
                placeholder: 'English',
                description: 'The language of the OCR for Scanned Documents. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>.'
            },
            {
                displayName: 'Extraction Region',
                name: 'rect',
                type: 'string',
                default: '',
                placeholder: '51.8, 114.8, 235.5, 204.0',
                description: 'The region of the document to extract',
                hint: `Specify the region to extract in the format: 'x, y, width, height' (e.g. '51.8, 114.8, 235.5, 204.0'). Use <a href="https://app.pdf.co/pdf-edit-add-helper">PDF Inspector</a> to measure coordinates.`,
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output links',
            },
            {
                displayName: 'HTTP Username',
                name: 'httpusername',
                type: 'string',
                default: '',
                description: 'The HTTP username if required to access source URL',
                hint: `The HTTP username if required to access source URL`,
            },
            {
                displayName: 'HTTP Password',
                name: 'httppassword',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The HTTP password if required to access source URL',
                hint: `The HTTP password if required to access source URL`,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptions_Image',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.ConvertFromPDF],
                convertType: ['toJpg', 'toPng', 'toWebp', 'toTiff'],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'Custom name for the output file. If empty, uses default file name.',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Pages',
                name: 'pages',
                type: 'string',
                default: '',
                placeholder: '0',
                hint: `Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. First page is 0 (zero). Example: '0,1-2,5-'.`,
            },
            {
                displayName: 'Extraction Region',
                name: 'rect',
                type: 'string',
                default: '',
                placeholder: '51.8, 114.8, 235.5, 204.0',
                description: 'The region of the document to extract',
                hint: `Specify the region to extract in the format: 'x, y, width, height' (e.g. '51.8, 114.8, 235.5, 204.0'). Use <a href="https://app.pdf.co/pdf-edit-add-helper">PDF Inspector</a> to measure coordinates.`,
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output links',
            },
            {
                displayName: 'HTTP Username',
                name: 'httpusername',
                type: 'string',
                default: '',
                description: 'The HTTP username if required to access source URL',
                hint: `The HTTP username if required to access source URL`,
            },
            {
                displayName: 'HTTP Password',
                name: 'httppassword',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The HTTP password if required to access source URL',
                hint: `The HTTP password if required to access source URL`,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptions_TextSimple',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.ConvertFromPDF],
                convertType: ['toTextSimple'],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'Custom name for the output file. If empty, uses default file name.',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Pages',
                name: 'pages',
                type: 'string',
                default: '',
                placeholder: '0',
                hint: `Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. First page is 0 (zero). Example: '0,1-2,5-'.`,
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output links',
            },
            {
                displayName: 'HTTP Username',
                name: 'httpusername',
                type: 'string',
                default: '',
                description: 'The HTTP username if required to access source URL',
                hint: `The HTTP username if required to access source URL`,
            },
            {
                displayName: 'HTTP Password',
                name: 'httppassword',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The HTTP password if required to access source URL',
                hint: `The HTTP password if required to access source URL`,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    },
];
async function execute(index) {
    const convertType = this.getNodeParameter('convertType', index);
    const body = { async: true, inline: true };
    let endpoint = '';
    const inputUrl = this.getNodeParameter('url', index);
    if (inputUrl)
        body.url = inputUrl;
    if (convertType === 'toCsv') {
        endpoint = '/v1/pdf/convert/to/csv';
    }
    else if (convertType === 'toHtml') {
        endpoint = '/v1/pdf/convert/to/html';
    }
    else if (convertType === 'toJpg') {
        endpoint = '/v1/pdf/convert/to/jpg';
    }
    else if (convertType === 'toJson') {
        endpoint = '/v1/pdf/convert/to/json';
    }
    else if (convertType === 'toJsonMeta') {
        endpoint = '/v1/pdf/convert/to/json-meta';
    }
    else if (convertType === 'toJson2') {
        endpoint = '/v1/pdf/convert/to/json2';
    }
    else if (convertType === 'toPng') {
        endpoint = '/v1/pdf/convert/to/png';
    }
    else if (convertType === 'toText') {
        endpoint = '/v1/pdf/convert/to/text';
    }
    else if (convertType === 'toTextSimple') {
        endpoint = '/v1/pdf/convert/to/text-simple';
    }
    else if (convertType === 'toTiff') {
        endpoint = '/v1/pdf/convert/to/tiff';
    }
    else if (convertType === 'toXls') {
        endpoint = '/v1/pdf/convert/to/xls';
    }
    else if (convertType === 'toXlsx') {
        endpoint = '/v1/pdf/convert/to/xlsx';
    }
    else if (convertType === 'toXml') {
        endpoint = '/v1/pdf/convert/to/xml';
    }
    else if (convertType === 'toWebp') {
        endpoint = '/v1/pdf/convert/to/webp';
    }
    if (convertType === 'toJpg' ||
        convertType === 'toPng' ||
        convertType === 'toWebp' ||
        convertType === 'toTiff') {
        const advancedOptions = this.getNodeParameter('advancedOptions_Image', index);
        const pages = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.pages;
        if (pages)
            body.pages = pages;
        const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
        if (fileName)
            body.name = fileName;
        const rect = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.rect;
        if (rect)
            body.rect = rect;
        const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
        if (callback)
            body.callback = callback;
        const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
        if (expiration)
            body.expiration = expiration;
        const httpusername = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httpusername;
        if (httpusername)
            body.httpusername = httpusername;
        const httppassword = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httppassword;
        if (httppassword)
            body.httppassword = httppassword;
        const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
        if (profiles)
            body.profiles = profiles;
    }
    else if (convertType === 'toTextSimple') {
        const advancedOptions = this.getNodeParameter('advancedOptions_TextSimple', index);
        const pages = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.pages;
        if (pages)
            body.pages = pages;
        const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
        if (fileName)
            body.name = fileName;
        const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
        if (callback)
            body.callback = callback;
        const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
        if (expiration)
            body.expiration = expiration;
        const httpusername = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httpusername;
        if (httpusername)
            body.httpusername = httpusername;
        const httppassword = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httppassword;
        if (httppassword)
            body.httppassword = httppassword;
        const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
        if (profiles)
            body.profiles = profiles;
    }
    else {
        const advancedOptions = this.getNodeParameter('advancedOptions', index);
        const pages = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.pages;
        if (pages)
            body.pages = pages;
        const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
        if (fileName)
            body.name = fileName;
        const lang = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.lang;
        if (lang)
            body.lang = lang;
        const rect = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.rect;
        if (rect)
            body.rect = rect;
        const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
        if (callback)
            body.callback = callback;
        const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
        if (expiration)
            body.expiration = expiration;
        const lineGrouping = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.lineGrouping;
        if (lineGrouping) {
            body.lineGrouping = lineGrouping;
            const unwrap = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.unwrap;
            if (unwrap !== undefined)
                body.unwrap = unwrap;
        }
        const httpusername = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httpusername;
        if (httpusername)
            body.httpusername = httpusername;
        const httppassword = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httppassword;
        if (httppassword)
            body.httppassword = httppassword;
        const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
        if (profiles)
            body.profiles = profiles;
    }
    (0, GenericFunctions_1.sanitizeProfiles)(body);
    const responseData = await GenericFunctions_1.pdfcoApiRequestWithJobCheck.call(this, endpoint, body);
    return this.helpers.returnJsonArray(responseData);
}
//# sourceMappingURL=convertFromPDF.js.map