"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.router = router;
const GenericFunctions_1 = require("./../GenericFunctions");
const aiInvoiceParser = __importStar(require("./aiInvoiceParser"));
const mergePdf = __importStar(require("./mergePdf"));
const splitPdf = __importStar(require("./splitPdf"));
const htmlToPDF = __importStar(require("./htmlToPDF"));
const convertToPDF = __importStar(require("./convertToPDF"));
const convertFromPDF = __importStar(require("./convertFromPDF"));
const addTextImagesToPDF = __importStar(require("./addTextImagesToPDF"));
const fillPdfForm = __importStar(require("./fillPdfForm"));
const pdfInfo = __importStar(require("./pdfInfo"));
const compressPdf = __importStar(require("./compressPdf"));
const pdfSecurity = __importStar(require("./pdfSecurity"));
const rotatePdf = __importStar(require("./rotatePdf"));
const deletePdfPages = __importStar(require("./deletePdfPages"));
const searchPdf = __importStar(require("./searchPdf"));
const searchAndReplaceDelete = __importStar(require("./searchAndReplaceDelete"));
const barcodeReader = __importStar(require("./barcodeReader"));
const barcodeGenerator = __importStar(require("./barcodeGenerator"));
const makePdfSearchable = __importStar(require("./makePdfSearchable"));
const uploadFile = __importStar(require("./uploadFile"));
async function router() {
    const items = this.getInputData();
    const operationResult = [];
    for (let i = 0; i < items.length; i++) {
        const action = this.getNodeParameter('operation', i);
        try {
            if (action === GenericFunctions_1.ActionConstants.AiInvoiceParser) {
                operationResult.push(...(await aiInvoiceParser.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.MergePdf) {
                operationResult.push(...(await mergePdf.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.SplitPdf) {
                operationResult.push(...(await splitPdf.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.UrlHtmlToPDF) {
                operationResult.push(...(await htmlToPDF.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.ConvertToPDF) {
                operationResult.push(...(await convertToPDF.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.ConvertFromPDF) {
                operationResult.push(...(await convertFromPDF.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.AddTextImagesToPDF) {
                operationResult.push(...(await addTextImagesToPDF.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.FillPdfForm) {
                operationResult.push(...(await fillPdfForm.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.PDFInfo) {
                operationResult.push(...(await pdfInfo.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.CompressPdf) {
                operationResult.push(...(await compressPdf.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.PDFSecurity) {
                operationResult.push(...(await pdfSecurity.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.RotatePdf) {
                operationResult.push(...(await rotatePdf.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.DeletePdfPages) {
                operationResult.push(...(await deletePdfPages.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.SearchPdf) {
                operationResult.push(...(await searchPdf.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.SearchAndReplaceDelete) {
                operationResult.push(...(await searchAndReplaceDelete.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.BarcodeReader) {
                operationResult.push(...(await barcodeReader.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.BarcodeGenerator) {
                operationResult.push(...(await barcodeGenerator.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.MakePdfSearchable) {
                operationResult.push(...(await makePdfSearchable.execute.call(this, i)));
            }
            else if (action === GenericFunctions_1.ActionConstants.UploadFile) {
                operationResult.push(...(await uploadFile.execute.call(this, i)));
            }
        }
        catch (err) {
            if (this.continueOnFail()) {
                operationResult.push({ json: this.getInputData(i)[0].json, error: err });
            }
            else {
                throw err;
            }
        }
    }
    return operationResult;
}
//# sourceMappingURL=router.js.map