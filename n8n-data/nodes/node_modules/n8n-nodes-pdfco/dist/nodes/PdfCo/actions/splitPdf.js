"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'PDF URL to Split',
        name: 'url',
        type: 'string',
        required: true,
        default: '',
        placeholder: 'https://example.com/invoice.pdf',
        description: 'The URL of the PDF file to split',
        hint: 'Source file URL of the PDF file to split',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SplitPdf],
            },
        },
    },
    {
        displayName: 'Split By',
        name: 'splitBy',
        type: 'options',
        options: [
            {
                name: 'Page Numbers',
                description: 'Split PDF Based on comma-separated indices of pages (or ranges)',
                value: 'pageNumber',
            },
            {
                name: 'Search Text',
                description: 'Split PDF Based on Text Search',
                value: 'searchText',
            },
            {
                name: 'Barcode',
                description: 'Split PDF Based on Barcode Search',
                value: 'barcode',
            },
        ],
        default: 'pageNumber',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SplitPdf],
            },
        },
    },
    {
        displayName: 'Pages (Numbers or Ranges)',
        name: 'pages',
        type: 'string',
        required: true,
        default: '',
        description: 'Comma-separated list of page numbers or ranges to split the PDF by',
        hint: 'Enter specific page numbers or ranges to extract. Use `1` for the first page, `1-3` for a range, or `7-` to include all pages from page 7 onward. Use negative numbers to count from the end (e.g., `-1` = last page, `-2` = second-to-last). Use `*` to split each page into a separate file.',
        placeholder: '1,2-5,7-',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SplitPdf],
                splitBy: ['pageNumber'],
            },
        },
    },
    {
        displayName: 'Text Search String',
        name: 'searchString',
        type: 'string',
        required: true,
        default: '',
        description: 'The text to search for in the PDF (e.g. company name)',
        hint: 'The text to search for in the PDF (e.g. company name)',
        placeholder: 'Hello World',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SplitPdf],
                splitBy: ['searchText'],
            },
        },
    },
    {
        displayName: 'Barcode Search String',
        name: 'barcodeSearchString',
        type: 'string',
        required: true,
        default: '',
        description: 'The barcode to search for in the PDF (e.g. [[barcode:qrcode HelloWorld]])',
        hint: 'The barcode to search for in the PDF (e.g. [[barcode:qrcode HelloWorld]])',
        placeholder: '[[barcode:qrcode HelloWorld]]',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SplitPdf],
                splitBy: ['barcode'],
            },
        },
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptionsTextSearch',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SplitPdf],
                splitBy: ['searchText'],
            },
        },
        options: [
            {
                displayName: 'Enable Case-Sensitive Search',
                name: 'caseSensitive',
                type: 'boolean',
                default: false,
                description: 'Whether to enable case-sensitive search',
            },
            {
                displayName: 'Enable Regular Expression Search',
                name: 'regexSearch',
                type: 'boolean',
                default: false,
                description: 'Whether to enable regular expression search',
            },
            {
                displayName: 'Exclude Pages with Identified Text',
                name: 'excludeKeyPages',
                type: 'boolean',
                default: false,
                description: 'Whether to exclude pages with identified text',
            },
            {
                displayName: 'OCR Language Name or ID',
                name: 'lang',
                type: 'options',
                typeOptions: {
                    loadOptionsMethod: 'getLanguages',
                },
                default: '',
                placeholder: 'English',
                description: 'The language to use for OCR. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>.',
            },
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'The name of the output file',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output link',
                hint: `The expiration time of the output link`,
            },
            {
                displayName: 'Inline',
                name: 'inline',
                type: 'boolean',
                default: true,
                description: 'Whether to return the output in the response',
            },
            {
                displayName: 'HTTP Username',
                name: 'httpusername',
                type: 'string',
                default: '',
                description: 'The HTTP username if required to access source URL',
                hint: `The HTTP username if required to access source URL`,
            },
            {
                displayName: 'HTTP Password',
                name: 'httppassword',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The HTTP password if required to access source URL',
                hint: `The HTTP password if required to access source URL`,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptionsBarcode',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SplitPdf],
                splitBy: ['barcode'],
            },
        },
        options: [
            {
                displayName: 'Enable Case-Sensitive Search',
                name: 'caseSensitive',
                type: 'boolean',
                default: false,
                description: 'Whether to enable case-sensitive search',
            },
            {
                displayName: 'Enable Regular Expression Search',
                name: 'regexSearch',
                type: 'boolean',
                default: false,
                description: 'Whether to enable regular expression search',
            },
            {
                displayName: 'Exclude Pages with Identified Barcode',
                name: 'excludeKeyPages',
                type: 'boolean',
                description: 'Whether to exclude pages with identified barcode',
                default: false,
            },
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                description: 'Custom name for the output file. If empty, uses default file name.',
                default: '',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                description: 'The expiration time of the output link in minutes',
                type: 'number',
                default: 60,
            },
            {
                displayName: 'Inline',
                name: 'inline',
                type: 'boolean',
                default: true,
                description: 'Whether to return the output in the response',
                hint: `Whether to return the output in the response`,
            },
            {
                displayName: 'HTTP Username',
                name: 'httpusername',
                type: 'string',
                default: '',
                description: 'The HTTP username if required to access source URL',
                hint: `The HTTP username if required to access source URL`,
            },
            {
                displayName: 'HTTP Password',
                name: 'httppassword',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The HTTP password if required to access source URL',
                hint: `The HTTP password if required to access source URL`,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptionsPageNumber',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.SplitPdf],
                splitBy: ['pageNumber'],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                description: 'Custom name for the output file. If empty, uses default file name.',
                default: '',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                description: 'The expiration time of the output link in minutes',
                default: 60,
            },
            {
                displayName: 'Inline',
                name: 'inline',
                type: 'boolean',
                default: true,
                description: 'Whether to return the output in the response',
                hint: `Whether to return the output in the response`,
            },
            {
                displayName: 'HTTP Username',
                name: 'httpusername',
                type: 'string',
                default: '',
                description: 'The HTTP username if required to access source URL',
                hint: `The HTTP username if required to access source URL`,
            },
            {
                displayName: 'HTTP Password',
                name: 'httppassword',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The HTTP password if required to access source URL',
                hint: `The HTTP password if required to access source URL`,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    }
];
async function execute(index) {
    const inputUrl = this.getNodeParameter('url', index);
    const body = { url: inputUrl, async: true, inline: true };
    const splitBy = this.getNodeParameter('splitBy', index);
    if (splitBy === 'searchText') {
        const searchString = this.getNodeParameter('searchString', index);
        if (searchString)
            body.searchString = searchString;
        const advancedOptions = this.getNodeParameter('advancedOptionsTextSearch', index);
        const caseSensitive = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.caseSensitive;
        if (caseSensitive !== undefined)
            body.caseSensitive = caseSensitive;
        const regexSearch = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.regexSearch;
        if (regexSearch !== undefined)
            body.regexSearch = regexSearch;
        const excludeKeyPages = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.excludeKeyPages;
        if (excludeKeyPages !== undefined)
            body.excludeKeyPages = excludeKeyPages;
        const lang = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.lang;
        if (lang)
            body.lang = lang;
        const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
        if (fileName)
            body.name = fileName;
        const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
        if (callback)
            body.callback = callback;
        const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
        if (expiration)
            body.expiration = expiration;
        const inline = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.inline;
        if (inline !== undefined)
            body.inline = inline;
        const httpusername = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httpusername;
        if (httpusername)
            body.httpusername = httpusername;
        const httppassword = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httppassword;
        if (httppassword)
            body.httppassword = httppassword;
        const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
        if (profiles)
            body.profiles = profiles;
    }
    else if (splitBy === 'barcode') {
        const barcodeSearchString = this.getNodeParameter('barcodeSearchString', index);
        if (barcodeSearchString)
            body.searchString = barcodeSearchString;
        const advancedOptions = this.getNodeParameter('advancedOptionsBarcode', index);
        const caseSensitive = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.caseSensitive;
        if (caseSensitive !== undefined)
            body.caseSensitive = caseSensitive;
        const regexSearch = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.regexSearch;
        if (regexSearch !== undefined)
            body.regexSearch = regexSearch;
        const excludeKeyPages = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.excludeKeyPages;
        if (excludeKeyPages !== undefined)
            body.excludeKeyPages = excludeKeyPages;
        const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
        if (fileName)
            body.name = fileName;
        const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
        if (callback)
            body.callback = callback;
        const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
        if (expiration)
            body.expiration = expiration;
        const inline = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.inline;
        if (inline !== undefined)
            body.inline = inline;
        const httpusername = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httpusername;
        if (httpusername)
            body.httpusername = httpusername;
        const httppassword = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httppassword;
        if (httppassword)
            body.httppassword = httppassword;
        const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
        if (profiles)
            body.profiles = profiles;
    }
    else {
        const pages = this.getNodeParameter('pages', index);
        if (pages)
            body.pages = pages;
        const advancedOptions = this.getNodeParameter('advancedOptionsPageNumber', index);
        const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
        if (fileName)
            body.name = fileName;
        const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
        if (callback)
            body.callback = callback;
        const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
        if (expiration)
            body.expiration = expiration;
        const inline = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.inline;
        if (inline !== undefined)
            body.inline = inline;
        const httpusername = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httpusername;
        if (httpusername)
            body.httpusername = httpusername;
        const httppassword = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httppassword;
        if (httppassword)
            body.httppassword = httppassword;
        const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
        if (profiles)
            body.profiles = profiles;
    }
    const endpoint = splitBy === 'pageNumber' ? `/v1/pdf/split` : `/v1/pdf/split2`;
    (0, GenericFunctions_1.sanitizeProfiles)(body);
    const responseData = await GenericFunctions_1.pdfcoApiRequestWithJobCheck.call(this, endpoint, body);
    return this.helpers.returnJsonArray(responseData);
}
//# sourceMappingURL=splitPdf.js.map