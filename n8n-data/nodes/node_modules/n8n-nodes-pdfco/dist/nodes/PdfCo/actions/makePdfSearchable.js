"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'PDF URL',
        name: 'url',
        type: 'string',
        required: true,
        default: '',
        placeholder: 'https://example.com/document.pdf',
        description: 'The URL of the PDF file to make searchable or unsearchable',
        hint: `Source file URL of the PDF file to make searchable or unsearchable`,
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.MakePdfSearchable],
            },
        },
    },
    {
        displayName: 'Make PDF Searchable or Unsearchable',
        name: 'searchableOptions',
        type: 'options',
        default: 'makeSearchable',
        options: [
            {
                name: 'Make PDF Searchable',
                value: 'makeSearchable',
            },
            {
                name: 'Make PDF Unsearchable',
                value: 'makeUnsearchable',
            },
        ],
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.MakePdfSearchable],
            },
        },
    },
    {
        displayName: 'OCR Language Name or ID',
        name: 'lang',
        type: 'options',
        typeOptions: {
            loadOptionsMethod: 'getLanguages',
        },
        default: '',
        placeholder: 'English',
        description: 'Specify the language for OCR when extracting text from scanned documents. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>.',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.MakePdfSearchable],
                searchableOptions: ['makeSearchable'],
            },
        }
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptions',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.MakePdfSearchable],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'Custom name for the output file. If empty, uses default file name.',
                hint: 'Custom name for the output file. If empty, uses default file name.',
            },
            {
                displayName: 'Pages',
                name: 'pages',
                type: 'string',
                description: 'Default: `0` (first page). Use ranges like `0,1-2,5,7-` (7- = from page 7 to end). Negative numbers count from end: `-2` = second-to-last page.',
                default: '',
                placeholder: '0',
                hint: 'Default: `0` (first page). Use ranges like `0,1-2,5,7-` (7- = from page 7 to end). Negative numbers count from end: `-2` = second-to-last page.',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: `The callback URL or Webhook used to receive the output data`,
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output link',
            },
            {
                displayName: 'Password',
                name: 'password',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The password of the password-protected PDF file',
                hint: `The password of the password-protected PDF file`,
            },
            {
                displayName: 'HTTP Username',
                name: 'httpusername',
                type: 'string',
                default: '',
                description: 'The HTTP username if required to access source URL',
                hint: `The HTTP username if required to access source URL`,
            },
            {
                displayName: 'HTTP Password',
                name: 'httppassword',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The HTTP password if required to access source URL',
                hint: `The HTTP password if required to access source URL`,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://docs.pdf.co/api-reference/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
                hint: `Use "JSON" to adjust custom properties. Review <a href="https://docs.pdf.co/api-reference/profiles">Profiles documentation</a> to set extra options for API calls and may be specific to certain APIs.`,
            },
        ],
    },
];
async function execute(index) {
    const url = this.getNodeParameter('url', index);
    const advancedOptions = this.getNodeParameter('advancedOptions', index);
    const searchableOptions = this.getNodeParameter('searchableOptions', index);
    const body = {
        url,
        async: true,
    };
    let apiUrl = '/v1/pdf/makesearchable';
    if (searchableOptions === 'makeSearchable') {
        const lang = this.getNodeParameter('lang', index);
        body.lang = lang;
    }
    else {
        apiUrl = '/v1/pdf/makeunsearchable';
    }
    const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
    if (fileName)
        body.name = fileName;
    const pages = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.pages;
    if (pages)
        body.pages = pages;
    const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
    if (callback)
        body.callback = callback;
    const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
    if (expiration)
        body.expiration = expiration;
    const httpusername = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httpusername;
    if (httpusername)
        body.httpusername = httpusername;
    const httppassword = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httppassword;
    if (httppassword)
        body.httppassword = httppassword;
    const password = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.password;
    if (password)
        body.password = password;
    const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
    if (profiles)
        body.profiles = profiles;
    (0, GenericFunctions_1.sanitizeProfiles)(body);
    const responseData = await GenericFunctions_1.pdfcoApiRequestWithJobCheck.call(this, apiUrl, body);
    return this.helpers.returnJsonArray(responseData);
}
//# sourceMappingURL=makePdfSearchable.js.map