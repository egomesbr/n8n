"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'PDF URL',
        name: 'url',
        type: 'string',
        required: true,
        default: '',
        placeholder: 'https://example.com/invoice.pdf',
        description: 'The URL of the PDF file to compress',
        hint: `Enter source file URL of the PDF file to compress`,
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.CompressPdf],
            },
        },
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptions',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.CompressPdf],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'The name of the output file',
                hint: `Enter the name of the output file. If not specified, the original file name is used.`,
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
                hint: 'The callback URL or Webhook used to receive the output data.',
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output link',
            },
            {
                displayName: 'Password',
                name: 'password',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The password of the PDF file',
                hint: 'The password of the password-protected PDF file',
            },
            {
                displayName: 'HTTP Username',
                name: 'httpusername',
                type: 'string',
                default: '',
                description: 'The HTTP username if required to access source URL',
                hint: 'The HTTP username if required to access source URL',
            },
            {
                displayName: 'HTTP Password',
                name: 'httppassword',
                type: 'string',
                typeOptions: {
                    password: true,
                },
                default: '',
                description: 'The HTTP password if required to access source URL',
                hint: 'The HTTP password if required to access source URL',
            },
            {
                displayName: 'Custom Compression Configuration',
                name: 'config',
                type: 'json',
                default: '',
                description: 'The custom compression configuration to use',
                hint: 'Define custom compression configuration. See PDF.co <a href="https://docs.pdf.co/api-reference/pdf-compress#the-default-config-object">PDF Compression Docs</a> for supported options.',
            },
        ],
    },
];
async function execute(index) {
    const inputUrl = this.getNodeParameter('url', index);
    const endpoint = `/v2/pdf/compress`;
    const body = { url: inputUrl, async: true, inline: true };
    const advancedOptions = this.getNodeParameter('advancedOptions', index);
    const name = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
    if (name)
        body.name = name;
    const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
    if (callback)
        body.callback = callback;
    const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
    if (expiration)
        body.expiration = expiration;
    const password = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.password;
    if (password)
        body.password = password;
    const httpusername = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httpusername;
    if (httpusername)
        body.httpusername = httpusername;
    const httppassword = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.httppassword;
    if (httppassword)
        body.httppassword = httppassword;
    const config = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.config;
    if (config)
        body.profiles = config;
    (0, GenericFunctions_1.sanitizeProfiles)(body);
    if (body.profiles) {
        body.config = JSON.parse(body.profiles);
        delete body.profiles;
    }
    const responseData = await GenericFunctions_1.pdfcoApiRequestWithJobCheck.call(this, endpoint, body);
    return this.helpers.returnJsonArray(responseData);
}
//# sourceMappingURL=compressPdf.js.map