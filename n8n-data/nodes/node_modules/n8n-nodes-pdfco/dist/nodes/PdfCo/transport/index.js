"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pdfcoApiRequest = pdfcoApiRequest;
exports.pdfcoApiRequestWithJobCheck = pdfcoApiRequestWithJobCheck;
exports.sanitizeProfiles = sanitizeProfiles;
const n8n_workflow_1 = require("n8n-workflow");
async function pdfcoApiRequest(url, body = {}, method = 'POST', qs = {}, option = {}) {
    const credentials = await this.getCredentials('pdfcoApi');
    let options = {
        baseURL: 'https://api.pdf.co',
        url: url,
        headers: {
            'content-type': 'application/json',
            'x-api-key': credentials.apiKey,
            'x-integration-key': credentials.integrationKey,
        },
        method,
        qs,
        body,
        json: true,
    };
    options = Object.assign({}, options, option);
    if (Object.keys(options.body).length === 0) {
        delete options.body;
    }
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
async function pdfcoApiRequestWithJobCheck(url, body = {}, method = 'POST', qs = {}, option = {}) {
    const mainRequestResp = await pdfcoApiRequest.call(this, url, body, method, qs, option);
    if (mainRequestResp.error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), mainRequestResp);
    }
    if (!mainRequestResp.jobId) {
        return mainRequestResp;
    }
    if (body.callback) {
        return mainRequestResp;
    }
    let jobCheckResp = { status: 'none' };
    do {
        jobCheckResp = await pdfcoApiRequest.call(this, '/v1/job/check', {
            jobid: mainRequestResp.jobId,
        });
        if (jobCheckResp.status == 'failed' ||
            jobCheckResp.status == 'aborted' ||
            jobCheckResp.status == 'unknown') {
            break;
        }
        await pdfcoApiRequest.call(this, '/v1/delay', undefined, 'GET', { val: 3000 });
    } while (jobCheckResp.status === 'working');
    if (jobCheckResp.status === 'success') {
        return jobCheckResp;
    }
    else {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), jobCheckResp);
    }
}
function sanitizeProfiles(data) {
    const profilesValue = data.profiles ? String(data.profiles).trim() : '';
    if (!profilesValue) {
        delete data.profiles;
        return;
    }
    try {
        let sanitized = profilesValue;
        if (!sanitized.startsWith('{')) {
            sanitized = `{ ${sanitized}`;
        }
        if (!sanitized.endsWith('}')) {
            sanitized = `${sanitized} }`;
        }
        data.profiles = sanitized;
    }
    catch (error) {
        throw new Error('Invalid JSON in Profiles. Check https://developer.pdf.co/api/profiles/ or contact support@pdf.co for help. ' +
            error.message);
    }
}
//# sourceMappingURL=index.js.map